{
    "id": "1",
    "course": {
        "title": "Data Structures and Algorithms",
        "description": "This course provides an intensive treatment of a cross-section of the key elements of algorithms and datastructures, with an emphasis on implementing them in modern programming environments, and using them to solve real-world problems. The course will begin with the fundamentals of searching, sorting, lists, stacks, and queues, but will quickly build to cover more advanced topics, including trees, graphs, and algorithmic strategies. It will also cover the analysis of the performance and tractability of algorithms and will build on the concept of Abstract Data Types. A key focus of the course is on effective implementation and good design principles.",
        "usefulLinks": {
            "T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein. Introduction to Algorithms. The MIT Press 2009.": "https://edutechlearners.com/download/Introduction_to_algorithms-3rd%20Edition.pdf",
            "M. T. Goodrich, R. Tamassia, and M. H. Goldwasser. Data Structures and Algorithms in Java. WILEY 2014.": "https://doc.lagout.org/Others/Data%20Structures/Data%20Structures%20%26%20Algorithms%20in%20Java%20%286th%20ed.%29%20%5BGoodrich%2C%20Tamassia%20%26%20Goldwasser%202014-01-28%5D.pdf"
        },
        "sections": [
            {
                "title": "Elementary Data Structures, Algorithmic Complexity and Approaches",
                "lessons": [
                    {
                        "topic": "Algorithms and Their Analysis",
                        "definitions": {
                            "Execution time": "The time a single execution of the statement would take.",
                            "Frequency count": "The number of times the statement is executed.",
                            "Space Complexity": "Determine how much space an algorithm requires by analyzing its storage requirements as a function of the input size."
                        },
                        "images": {
                            "Growth rates of common functions": "https://www.oreilly.com/library/view/c-high-performance/9781787120952/assets/57c59f30-a7d5-4066-a4d3-8251c2784600.png",
                            "Insertion sort Time Complexity Analysis": "https://i.stack.imgur.com/AxoMa.png"
                        },
                        "questions": [
                            {
                                "question": "What one can ignore in Big O analysis?",
                                "answer": "Constant factors and lower-order terms."
                            },
                            {
                                "question": "Is the pseudocode more detailed than a program?",
                                "answer": "No, pseudocode is less detailed."
                            }
                        ]
                    },
                    {
                        "topic": "Elementary Data Structures",
                        "definitions": {
                            "Data Structure": "The physical implementation of how the data will be stored and how the data will be manipulated.",
                            "Abstract Data Type": "Description of how we view the data and the operations that are allowed without regard to how they will be implemented.",
                            "Node's Successor": "The next node in the sequence.",
                            "Node's Predecessor": "The previous node in the sequence."
                        },
                        "images": {
                            "Queue ADT": "https://courses.cs.washington.edu/courses/cse326/00wi/handouts/lecture1/img015.gif"
                        },
                        "questions": [
                            {
                                "question": "What is list's length?",
                                "answer": "It is the number of elements in list."
                            },
                            {
                                "question": "What implementation of List ADT we should use when the number of elements in the list is unknown?",
                                "answer": "Linked list is the best implementation in this case."
                            }
                        ]
                    },
                    {
                        "topic": "Hashing Map and Collision Handling",
                        "definitions": {
                            "Map": "Model of a searchable dynamic set of key-value entries.",
                            "Hash function": "A mathematical way of mapping an arbitrary key to an index in the array.",
                            "Collision": "When two keys hash to the same index."
                        },
                        "images": {},
                        "questions": [
                            {
                                "question": "What are the main operations for Map ADT?",
                                "answer": "Searching, inserting and deleting items."
                            },
                            {
                                "question": "What are the parts of a Hash Function?",
                                "answer": "A hash function is the composition of two functions: hash code and compression function."
                            }
                        ]
                    },
                    {
                        "topic": "Algorithmic Strategies",
                        "definitions": {
                            "Algorithmic Strategy": "Approach to solving a problem.",
                            "Brute Force": "Straightforward approach to solving a problem based on the simple formulation of the problem.",
                            "Dynamic Programming": "an algorithmic paradigm that solves a given complex problem by breaking it into subproblems and stores the results of subproblems to avoid computing the same results again."
                        },
                        "images": {
                            "Maximum Subarray Problem solution": "https://i.stack.imgur.com/ByTKG.png",
                            "Master Theorem": "https://i.stack.imgur.com/SLVoZ.png",
                            "Dynamic Programming": "https://dz2cdn1.dzone.com/storage/temp/10299456-lsip-1.png"
                        },
                        "questions": [
                            {
                                "question": "What are the three steps of Divide-and-Conquer approach?",
                                "answer": "Divide, Conquer and Combine."
                            },
                            {
                                "question": "What are recurrence relations used for?",
                                "answer": "These relations are used to determine the running time of recursive algorithms."
                            },
                            {
                                "question": "How the overlapping of the sub-problems is solved in Dynamic Programming?",
                                "answer": "The results of sub-problems are stored and updated dynamically."
                            }
                        ]
                    }
                ]
            },
            {
                "title": "Sorting Algorithms and Trees",
                "lessons": [
                    {
                        "topic": "Comparison and Non-comparison Sort",
                        "definitions": {
                            "Sorting": "Arranging items of the same kind, class or nature, in some ordered sequence.",
                            "Sorting Algorithm": "An algorithm that arranges elements of a collection in a certain order.",
                            "Stable sort": "One which preserves the original order of the input sent whenever it encounters items of the same rank it."
                        },
                        "images": {
                            "Stable sorting": "https://www.baeldung.com/wp-content/uploads/2019/08/Stable-vs-Unstable-1.png",
                            "Merge Sort Pseudocode": "https://i.stack.imgur.com/wk49i.png"
                        },
                        "questions": [
                            {
                                "question": "What is in-place sorting?",
                                "answer": "When algorithm uses a small fixed amount of extra space to perform sorting."
                            },
                            {
                                "question": "What is the time complexity of Bubble Sort?",
                                "answer": "O(n^2)."
                            }
                        ]
                    },
                    {
                        "topic": "Binary Search Tree",
                        "definitions": {
                            "Node": "Any object or value stored in the tree.",
                            "Parent": "Any node which has 1...n child nodes.",
                            "Siblings": "The collection of all of the child nodes to one particular parent.",
                            "Height of tree": "The number of edges between the root node and the leaf that is farthest from the root node."
                        },
                        "images": {
                            "Tree": "https://upload.wikimedia.org/wikipedia/commons/thumb/5/5f/Tree_%28computer_science%29.svg/1200px-Tree_%28computer_science%29.svg.png",
                            "Degenerate Binary Tree": "https://www.ics.uci.edu/~thornton/ics46/Notes/BinarySearchTrees/DegenerateTree.png"
                        },
                        "questions": [
                            {
                                "question": "What are the two binary tree representations?",
                                "answer": "Linked structure and Array structure."
                            },
                            {
                                "question": "What is the time complexity of searching in a BST of height h?",
                                "answer": "O(h)."
                            }
                        ]
                    },
                    {
                        "topic": "Balanced Binary Search Trees",
                        "definitions": {
                            "Red-Black Tree": "A type of self-balancing tree.",
                            "AVL Tree": "A binary search tree that is height balanced."
                        },
                        "images": {
                            "BST Rotations": "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a2/Bst_rotations.svg/1200px-Bst_rotations.svg.png",
                            "Red-Black Tree Example": "https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Red-black_tree_example.svg/500px-Red-black_tree_example.svg.png"
                        },
                        "questions": [
                            {
                                "question": "What is the time complexity of deletion from a Red-Black Tree?",
                                "answer": "O(logn)."
                            },
                            {
                                "question": "What color does every leaf have in Red-Black Tree?",
                                "answer": "Black."
                            }
                        ]
                    },
                    {
                        "topic": "Tree Traversals",
                        "definitions": {
                            "Tree Traversal": "A way of accessing or visiting all the nodes of tree."
                        },
                        "images": {
                            "Inorder Tree Traversal Example": "https://miro.medium.com/max/443/1*4t19-10wzwqivek7h2MCfQ.png"
                        },
                        "questions": [
                            {
                                "question": "What is the time complexity for tree traversals?",
                                "answer": "O(n)."
                            },
                            {
                                "question": "What three types of traversals exist?",
                                "answer": "Preorder, Inorder and Postorder traversals."
                            }
                        ]
                    },
                    {
                        "topic": "Priority Queues and Binary Heaps",
                        "definitions": {
                            "Complete Binary Tree": "Binary Tree that is filled out on every level, and on the last level all nodes should be as far to left as possible.",
                            "Binary Heap": "A complete binary tree with flexible order of elements."
                        },
                        "images": {
                            "Max Heap Example": "https://coderlessons.com/wp-content/uploads/2019/07/max_heap_example.jpg"
                        },
                        "questions": [
                            {
                                "question": "How many nodes does the heap have at the i-th level?",
                                "answer": "2^i nodes."
                            },
                            {
                                "question": "What is the index of parent node for node with index i in array implementation of heap?",
                                "answer": "(i-1)/2."
                            }
                        ]
                    }
                ]
            }
        ]
    }
}